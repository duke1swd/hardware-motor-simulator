/*
 * Do The Thing
 */

#include <Arduino.h>
#include <LiquidCrystal.h>
#include "io_ref.h"
#include "state.h"
#include "menu.h"
#include "log.h"
#include "dac.h"

extern LiquidCrystal lcd;
extern unsigned long loop_time;
static unsigned long next_check_time;
static unsigned long test_start_time;
static const unsigned long check_interval = 100; // milliseconds
extern void running_state(bool);

#define	NO_PRESSURE		409		// approx 0 PSI
// 4096/10 + 75 * (8/10 * 4096) / 500
#define	IG_PRESS_GOOD		900		// approx 75 PSI
// 4096/10 + 150 * (8/10 * 4096) / 500
#define	IG_PRESSURE_TARGET	1392		// approx 150 PSI

bool fr_sim_ig;		// true if we are simulating the igniter pressure sensor

void full_run_state(bool first_time) {

/*xxx*/Serial.print("Full Run State\n"); delay(1000);
	if (first_time) {
		log_reset();
		log_enabled = true;
		lcd.clear();
		lcd.print("Full Run");
		next_check_time = 0;
		output_led = LED_ON;
	}

	if (loop_time >= next_check_time) {
		first_time = true;
		next_check_time = loop_time + check_interval;
	}
	
	if (input_action_button) {
		input_action_button = false;
		log_commit();
		log_enabled = false;
		state_new(menu_state);
	}

	if (first_time) {
		fr_sim_ig = !dac_ig_press_present();
		lcd.setCursor(0, 1);
		if (fr_sim_ig) {
			lcd.print("Simulated Ignitor");
			dac_set(DAC_IG, NO_PRESSURE);
		} else
			lcd.print("Real Igniter");
	}

	if (input_ig_valve_ipa_level || input_ig_valve_n2o_level || input_spark_sense)
		state_new(running_state);
}

/*
 * Monitor the igniter.
 * Log when pressure becomes good.
 * Record when it became good so simulated main will wait awhile after igniter to work.
 *
 * This routine is called and does the right thing regardless of whether ig pressure is
 * from a real sensor or generated by the pressure sensor simulator.
 */
static bool ig_pressure_good;
static bool ig_pressure_has_been_good;
static unsigned long ig_pressure_start;
static unsigned long ig_good_time;		// Time when we think the igniter should fire.

static void monitor_ig() {
	bool b;

	b = (input_ig_press >= IG_PRESS_GOOD);
	if (b && !ig_pressure_has_been_good) {
		log(LOG_IG_PRESSURE_GOOD_1, 0);
		ig_pressure_has_been_good = true;
	} else if (b && !ig_pressure_good)
		log(LOG_IG_PRESSURE_GOOD, 0);

	if (b && !ig_pressure_good)
		ig_pressure_start = loop_time;	// set on rising edge
	ig_pressure_good = b;
}

/*
 * Simulate the ingiter.  We do this every millisecond.
 */
static unsigned long sim_ig_next_update;
static const unsigned long sim_ig_interval = 1;
static bool sim_ig_changing;
static int sim_ig_output;
static int sim_ig_increment;
static int sim_ig_output_target;
static int sim_noise;

static void sim_ig() {
	sim_noise++;
	if (sim_noise > 3)
		sim_noise = -3;

	// avoid running too often
	if (loop_time < sim_ig_next_update)
		return;
	sim_ig_next_update = loop_time + sim_ig_interval;

	// If we are changing the output signal, do so gradually.
	if (sim_ig_changing) {
		sim_ig_output += sim_ig_increment;
		if (sim_ig_increment > 0) {
			if (sim_ig_output >= sim_ig_output_target) {
				sim_ig_output = sim_ig_output_target;
				sim_ig_changing = false;
			}
		} else {
			if (sim_ig_output <= sim_ig_output_target) {
				sim_ig_output = sim_ig_output_target;
				sim_ig_changing = false;
			}
		}
	}
	dac_set(DAC_IG, sim_ig_output + sim_noise);

	// If any of the valves are off, kill the ig pressure
	if ((!input_ig_valve_ipa_level || !input_ig_valve_n2o_level) &&
			( sim_ig_output > NO_PRESSURE ||
			  sim_ig_output_target > NO_PRESSURE)) {
		sim_ig_changing = true;
		sim_ig_output_target = NO_PRESSURE;
		sim_ig_increment = -500;	// I just made this up.
	}

	// If conditions are right, and have been for awhile, ig pressure up.
	if (input_ig_valve_ipa_level && input_ig_valve_n2o_level && input_spark_sense) {
		if (ig_good_time == 0)
			ig_good_time = loop_time + 25;
		else if (loop_time >= ig_good_time) {
			sim_ig_changing = true;
			sim_ig_increment = 300;	// come up to pressure in 5 ms ?
			sim_ig_output_target = IG_PRESSURE_TARGET;
		}
	}

	// If conditions are not right for ignition, don't let it start
	if (!input_ig_valve_ipa_level || !input_ig_valve_n2o_level || !input_spark_sense)
		ig_good_time = 0;
}

static void sim_main() {
}

/*
 * This state handles running the test.
 */
void running_state(bool first_time) {

	if (first_time) {
		output_led = LED_BLINKING;
		test_start_time = loop_time;
		ig_pressure_good = false;
		ig_pressure_has_been_good = false;
		sim_ig_changing = false;
		sim_ig_output = NO_PRESSURE;	// no pressure, but sensor present.
		sim_ig_next_update = 0;
	}

	if (fr_sim_ig)
		sim_ig();

	monitor_ig();

	sim_main();
}
